From 19a1683bd408872c61011d3b88d9b2e59a3214ee Mon Sep 17 00:00:00 2001
From: Dexuan Cui <decui@microsoft.com>
Date: Wed, 27 Sep 2017 21:20:01 -0700
Subject: [PATCH 05/71] vmbus: fix performance regression

Need to avoid signaling host under more conditions.
This can be merged with earlier change when sending upstream.

Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
---
 drivers/hv/ring_buffer.c |   40 ++++++++++++++++++++++++++--------------
 1 file changed, 26 insertions(+), 14 deletions(-)

--- a/drivers/hv/ring_buffer.c	2017-11-17 09:03:33.410935741 -0800
+++ b/drivers/hv/ring_buffer.c	2017-11-17 09:03:33.406935794 -0800
@@ -396,11 +396,22 @@ EXPORT_SYMBOL_GPL(__hv_pkt_iter_next);
 
 /*
  * Update host ring buffer after iterating over packets.
+ *
+ * Avoid unnecessary signaling of the host by making sure that all
+ * data is read.
+ *
+ * In addition, in Windows 8 or later there is an extension for the
+ * host to indicate how much space needs to be available before
+ * signaling. The host sets pending_send_sz to the number of bytes
+ * that it is waiting to send.
  */
 void hv_pkt_iter_close(struct vmbus_channel *channel)
 {
 	struct hv_ring_buffer_info *rbi = &channel->inbound;
-	u32 orig_write_sz = hv_get_bytes_to_write(rbi);
+	u32 cached_write_sz, cur_write_sz, pending_sz;
+
+	/* Available space before read_index update */
+	cached_write_sz = hv_get_bytes_to_write(rbi);
 
 	/*
 	 * Make sure all reads are done before we update the read index since
@@ -408,6 +419,8 @@ void hv_pkt_iter_close(struct vmbus_chan
 	 * is updated.
 	 */
 	virt_rmb();
+
+	/* Update the position where ring buffer has been read from */
 	rbi->ring_buffer->read_index = rbi->priv_read_index;
 
 	/*
@@ -423,24 +436,23 @@ void hv_pkt_iter_close(struct vmbus_chan
 	 */
 	virt_mb();
 
-	/* If host has disabled notifications then skip */
-	if (rbi->ring_buffer->interrupt_mask)
-		return;
-
 	if (rbi->ring_buffer->feature_bits.feat_pending_send_sz) {
-		u32 pending_sz = READ_ONCE(rbi->ring_buffer->pending_send_sz);
+		pending_sz = READ_ONCE(rbi->ring_buffer->pending_send_sz);
 
-		/*
-		 * If there was space before we began iteration,
-		 * then host was not blocked. Also handles case where
-		 * pending_sz is zero then host has nothing pending
-		 * and does not need to be signaled.
-		 */
-		if (orig_write_sz > pending_sz)
+		/* If the other end is not blocked on write don't bother. */
+		if (pending_sz == 0)
 			return;
 
 		/* If pending write will not fit, don't give false hope. */
-		if (hv_get_bytes_to_write(rbi) < pending_sz)
+		cur_write_sz = hv_get_bytes_to_write(rbi);
+		if (cur_write_sz <= pending_sz)
+			return;
+
+		/*
+		 * If there was space before we began iteration, then
+		 * host was not blocked.
+		 */
+		if (cached_write_sz > pending_sz)
 			return;
 	}
 
