From 72eeb3b0fcc2dbf419664efc20f86c9a1d597590 Mon Sep 17 00:00:00 2001
From: stephen hemminger <stephen@networkplumber.org>
Date: Wed, 19 Jul 2017 11:53:17 -0700
Subject: [PATCH 35/98] netvsc: need rcu_derefence when accessing internal
 device info

The netvsc_device structure should be accessed by rcu_dereference
in the send path.  Change arguments to netvsc_send() to make
this easier to do correctly.

Remove no longer needed hv_device_to_netvsc_device.

Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
---
 drivers/net/hyperv/hyperv_net.h   |   10 +++-------
 drivers/net/hyperv/netvsc.c       |    8 +++++---
 drivers/net/hyperv/netvsc_drv.c   |    4 ++--
 drivers/net/hyperv/rndis_filter.c |    2 +-
 4 files changed, 11 insertions(+), 13 deletions(-)

--- a/drivers/net/hyperv/hyperv_net.h	2017-11-17 10:19:14.711795168 -0800
+++ b/drivers/net/hyperv/hyperv_net.h	2017-11-17 10:19:14.707795220 -0800
@@ -183,10 +183,12 @@ struct rndis_device {
 /* Interface */
 struct rndis_message;
 struct netvsc_device;
+struct net_device_context;
+
 struct netvsc_device *netvsc_device_add(struct hv_device *device,
 					const struct netvsc_device_info *info);
 void netvsc_device_remove(struct hv_device *device);
-int netvsc_send(struct hv_device *device,
+int netvsc_send(struct net_device_context *ndc,
 		struct hv_netvsc_packet *packet,
 		struct rndis_message *rndis_msg,
 		struct hv_page_buffer **page_buffer,
@@ -791,12 +793,6 @@ net_device_to_netvsc_device(struct net_d
 	return ((struct net_device_context *)netdev_priv(ndev))->nvdev;
 }
 
-static inline struct netvsc_device *
-hv_device_to_netvsc_device(struct hv_device *device)
-{
-	return net_device_to_netvsc_device(hv_get_drvdata(device));
-}
-
 /* NdisInitialize message */
 struct rndis_initialize_request {
 	u32 req_id;
--- a/drivers/net/hyperv/netvsc.c	2017-11-17 10:19:14.711795168 -0800
+++ b/drivers/net/hyperv/netvsc.c	2017-11-17 10:19:14.707795220 -0800
@@ -824,13 +824,15 @@ static inline void move_pkt_msd(struct h
 	msdp->count = 0;
 }
 
-int netvsc_send(struct hv_device *device,
+/* RCU already held by caller */
+int netvsc_send(struct net_device_context *ndev_ctx,
 		struct hv_netvsc_packet *packet,
 		struct rndis_message *rndis_msg,
 		struct hv_page_buffer **pb,
 		struct sk_buff *skb)
 {
-	struct netvsc_device *net_device = hv_device_to_netvsc_device(device);
+	struct netvsc_device *net_device = rcu_dereference(ndev_ctx->nvdev);
+	struct hv_device *device = ndev_ctx->device_ctx;
 	int ret = 0;
 	struct netvsc_channel *nvchan;
 	u32 pktlen = packet->total_data_buflen, msd_len = 0;
@@ -842,7 +844,7 @@ int netvsc_send(struct hv_device *device
 	bool xmit_more = (skb != NULL) ? skb->xmit_more : false;
 
 	/* If device is rescinded, return error and packet will get dropped. */
-	if (unlikely(net_device->destroy))
+	if (unlikely(!net_device || net_device->destroy))
 		return -ENODEV;
 
 	/* We may race with netvsc_connect_vsp()/netvsc_init_buf() and get
--- a/drivers/net/hyperv/netvsc_drv.c	2017-11-17 10:19:14.711795168 -0800
+++ b/drivers/net/hyperv/netvsc_drv.c	2017-11-17 10:19:14.707795220 -0800
@@ -528,8 +528,8 @@ static int netvsc_start_xmit(struct sk_b
 
 	/* timestamp packet in software */
 	skb_tx_timestamp(skb);
-	ret = netvsc_send(net_device_ctx->device_ctx, packet,
-			  rndis_msg, &pb, skb);
+
+	ret = netvsc_send(net_device_ctx, packet, rndis_msg, &pb, skb);
 	if (likely(ret == 0))
 		return NETDEV_TX_OK;
 
--- a/drivers/net/hyperv/rndis_filter.c	2017-11-17 10:19:14.711795168 -0800
+++ b/drivers/net/hyperv/rndis_filter.c	2017-11-17 10:19:14.707795220 -0800
@@ -243,7 +243,7 @@ static int rndis_filter_send_request(str
 			pb[0].len;
 	}
 
-	ret = netvsc_send(net_device_ctx->device_ctx, packet, NULL, &pb, NULL);
+	ret = netvsc_send(net_device_ctx, packet, NULL, &pb, NULL);
 	return ret;
 }
 
